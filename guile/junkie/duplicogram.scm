; vim:syntax=scheme filetype=scheme expandtab
;;; This module defines some web pages to handle captures online

(define-module (junkie duplicogram))

(use-modules (ice-9 match)
             (ice-9 format)
             (srfi srfi-1)
             (junkie defs)
             (junkie runtime)
             (junkie www server))


(define (register)
  (load-plugin "duplicogram")
  (add-dispatcher
    (lambda (path params)
      (slog log-debug "Duplicodispatch for path ~s and params ~s" path params)
      (match path
             [("duplicogram" "home")
              (and=> (assq-ref params 'bucket-width)
                     (lambda (bw)
                       (set-duplicogram-bucket-width (string->number bw))))
              (let* ((width        1800)
                     (height       600)
                     (font-height  16)
                     (font-width   10)
                     (tick-len     5)
                     (axis-x-y     (- height (* 2 font-height)))
                     (axis-y-x     (* 10 font-width))
                     (nb-ticks-x   10)
                     (nb-ticks-y   5)
                     (tick-every-x #f) ; set later
                     (tick-every-y #f)
                     (bucket-width (get-duplicogram-bucket-width))
                     (max-dt       0)
                     (max-dups     0)
                     (pts          (get-duplicogram))
                     (dups->y      (lambda (dups)
                                     (if (> max-dups 0)
                                         (/ (* (- max-dups dups) axis-x-y) max-dups)
                                         axis-x-y)))
                     (y->dups      (lambda (y)
                                     (- max-dups (/ (* y max-dups) axis-x-y))))
                     (dt->x        (lambda (dt)
                                     (if (> max-dt 0)
                                         (+ axis-y-x (/ (* dt (- width axis-y-x)) max-dt))
                                         0)))
                     (x->dt        (lambda (x)
                                     (/ (* (- x axis-y-x) max-dt) (- width axis-y-x)))))
                (for-each (lambda (pt)
                            (let ((x (car pt))
                                  (y (cdr pt)))
                              (if (> x max-dt) (set! max-dt x))
                              (if (> y max-dups) (set! max-dups y))))
                          pts)
                (and=> (assq-ref params 'max-dt)
                       (lambda (dt) (set! max-dt (string->number dt))))
                (set! tick-every-x (if (> max-dt 0)
                                       (/ (expt 10 (floor (log10 max-dt))) nb-ticks-x)
                                       0))
                (set! tick-every-y (if (> max-dups 0)
                                       (/ (expt 10 (floor (log10 max-dups))) nb-ticks-y)
                                       0))
                (slog log-debug "ticks: every ~s on X (0->~s) and every ~s on Y (0->~s)" tick-every-x max-dt tick-every-y max-dups)
                (respond
                  `((form
                      (label
                        "bucket width (usec):"
                        (input (@ (name . "bucket-width")
                                  (value . ,bucket-width))))
                      (label
                        "max DT (usec):"
                        (input (@ (name . "max-dt")
                                  (value . ,max-dt))))
                      (input (@ (type . submit)
                                (value . "change"))))
                    (svg (@ (class . "graph")
                            (width . ,(string-append (number->string width) "px"))
                            (height . ,(string-append (number->string height) "px")))
                         (descr ,(string-append "Plot for max " (number->string max-dups) " dups and dt up to " (number->string max-dt)
                                                ", with bucket-width = " (number->string bucket-width)))
                         (marker (@ (id . "Arrowhead")
                                    (viewbox . "0 0 10 10")
                                    (refX . 0)
                                    (refY . 5)
                                    (markerUnits . "strokeWidth")
                                    (markerWidth . 4)
                                    (markerHeight . 3)
                                    (orient . "auto"))
                                 (path (@ (d . "M 0 0 L 10 5 L 0 10 z"))))
                         (g (@ (class . "axe axe-x"))
                            (line (@ (x1 . ,(- axis-y-x 10))
                                     (y1 . ,axis-x-y)
                                     (x2 . ,(- width 10))
                                     (y2 . ,axis-x-y)
                                     (marker-end . "url(#Arrowhead)")))
                            (text (@ (x . ,(- width 10))
                                     (y . ,(+ axis-x-y font-height))
                                     (font-size . ,font-width)
                                     (text-anchor . "end"))
                                  "DT (ms)"))
                         (g (@ (class . "axe axe-y"))
                            (line (@ (x1 . ,axis-y-x)
                                     (y1 . ,(- height 10))
                                     (x2 . ,axis-y-x)
                                     (y2 . 10)
                                     (marker-end . "url(#Arrowhead)")))
                            (text (@ (x . ,axis-y-x)
                                     (y . 10)
                                     (font-size . ,font-width)
                                     (text-anchor . "start"))
                                  "nb dups"))
                         ; ticks on Y
                         ,@(if (> tick-every-y 0)
                               (unfold (lambda (d) (< (dups->y d) 10)) ; stop when Y < 10 (arrowhead approx size)
                                       (lambda (d)
                                         (let ((y (exact->inexact (dups->y d))))
                                           `(g (@ (class . "tick tick-y"))
                                               (line (@ (x1 . ,(exact->inexact (- axis-y-x (/ tick-len 2))))
                                                        (y1 . ,y)
                                                        (x2 . ,(exact->inexact (+ axis-y-x (/ tick-len 2))))
                                                        (y2 . ,y)))
                                               (text (@ (x . ,(exact->inexact (- axis-y-x (/ tick-len 2))))
                                                        (y . ,y)
                                                        (font-size . ,font-width)
                                                        (text-anchor . "end"))
                                                     ,(format #f "~5g%" (* 100 d))))))
                                       (lambda (d)
                                         (slog log-debug "dups ratio was ~s" d)
                                         (+ d tick-every-y))
                                       0)
                               '())
                         ; ticks on X
                         ,@(if (> tick-every-x 0)
                               (unfold (lambda (t) (>= (dt->x t) (- width 10))) ; stop when Y < 10 (arrowhead approx size)
                                       (lambda (t)
                                         (let ((x (exact->inexact (dt->x t))))
                                           `(g (@ (class . "tick tick-x"))
                                               (line (@ (x1 . ,x)
                                                        (y1 . ,(exact->inexact (- axis-x-y (/ tick-len 2))))
                                                        (x2 . ,x)
                                                        (y2 . ,(exact->inexact (+ axis-x-y (/ tick-len 2))))))
                                               (text (@ (x . ,(exact->inexact (- x (/ font-width 2))))
                                                        (y . ,(exact->inexact (+ axis-x-y (/ (+ font-height tick-len) 2))))
                                                        (font-size . ,font-width)
                                                        (text-anchor . "start"))
                                                     ,(exact->inexact (/ t 1000))))))
                                       (lambda (t) (+ t tick-every-x))
                                       0)
                               '())
                         (polyline (@ (class . "plot")
                                      (points . ,(fold (lambda (pt prev)
                                                         (if (<= (car pt) max-dt)
                                                             (string-append (number->string (exact->inexact (dt->x (car pt)))) ","
                                                                            (number->string (exact->inexact (dups->y (cdr pt)))) " " prev)
                                                             prev))
                                                       ; FIXME: sort pts according to x
                                                       "" pts))))))))]
             [_ #f])))
  (add-menus "duplicogram" "/duplicogram/home"))

(export register)

